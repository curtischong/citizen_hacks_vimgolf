A letter from Curtis

Hello! I hope that youâ€™re having a blast meeting new people and working on your ideas at Citizen hacks!

While you type away on your laptops I thought that it would be cool to tell a story about the team and how we planned this event.

It began when we entered university.


// Part 1: The Idea

const YEAR = 2018

let group = ['Marcel', 'Mio', 'Benn']

let add_member = (group, name) => {
  group.push(name);
  console.log(`Added ${name}`);
};

let add_members = (group, names) => {
  names.forEach((name) => {
    add_member(group, name);
  });
};

// Part 2: Assembling the team

// assembling friends
let new_members = ['Daniel', 'Curtis', 'Michael']
add_members(group, new_members);

let fs = require('fs');
let october_diary = JSON.parse(fs.readFileSync('October_2019.json', 'utf8'));

october_diary['school'] = True
october_diary['free_time'] = 'rip'
october_diary['new_friends'] = ['Adam', 'Ahmed', 'Ethan', 'Hrithvik', 'Manvi', 'Sherwin', 'Audrey', 'Mirjana'];
add_members(group, october_diary.new_friends);

let team = new CitizenHacks(group);
team.publish_website();

// Part 3: Finding Sponsors
let find_companies = (contacted_companies) => {
  let new_companies = [];
  let found = search_google(['privacy_companies', 'security', 'encryptio']);
  found = found.concat(search_google_maps(['Toronto Tech Companies']));
  found = found.concat(search_linkedin(['old_friends', 'new_connections']));
  found.forEach((company) => {
    if(!contacted_companies.has(company)){
      new_companies.push(company);
    }
  });
  return new_companies;
}

let current_date = new Date();
let event_date = new Date(2018, 11, 23);
let contacted_companies = new Set();

while(current_date < event_date){
  let companies = find_companies(contacted_companies);

  // https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array
  let selected_company = companies[Math.floor(Math.random()*companies.length)];

  request_sponsorship(selected_company);
  contacted_companies.add(selected_company);
}


// Part 4: Contacting Sponsors

const request = require('request');

// Talking to sponsors
let request_sponsorship = (company_name) => {
  request(company_name + 'sponsorship_emails', (err, res, reply_body) => {
    if(response.statusCode != 200){
      console.log(`${company_name} couldn't sponsor us with error:`);
      console.log(err);
      return;
    }
    
    if(details_fuzzy(reply_body)){
      team.coordinate_specifics();
    }
  });
};

let details_fuzzy = (reply) => {
  if(reply.sponsorship_tier == null or reply.reply_contract == 'not_signed' or reply.deliverables = undefined){
    return true;
  }
  return false;
}

// Part 5: Bad News
break;
venue.secured = false;

const time_left = "1 month";

let decide_fate = (fate) => {
  switch(fate){
    case "carry_on":
      team.drop_out_of_school();
      team.get_new_job("Citizen_Hacks");
      break;
    case "cancel_event":
      let broken_hearts = "all_of_them";
    case "postpone_event":
      let broken_hearts = "all_of_them";
      let hope = "beyond_the_horizon";
  }
}
decide_fate("postpone_event");


// Part 6: A New Hope

event_date = new Date(2019, 9, 28);

while(current_date < event_date){
  let companies = find_companies(contacted_companies);

  // https://stackoverflow.com/questions/5915096/get-random-item-from-javascript-array
  let selected_company = companies[Math.floor(Math.random()*companies.length)];

  request_sponsorship(selected_company);
  contacted_companies.add(selected_company);
}

privacy_commissioner_of_canada.grant_accepted(Citizen_Hacks);

let MLH = require('mlh');

class Citizen_Hacks extends MLH{
  // ...
}

keybase.sponsor(Citizen_Hacks);
Feroot.sponsor(Citizen_Hacks);
Easy_DNS.sponsor(Citizen_Hacks);
Ada.sponsor(Citizen_Hacks);


team.find_speakers();

// Part 7: Applications

// returns an iterator
promotional_graphics = team.create_graphics(['time', 'coffee', 'love']);


while(current_date < application_close){
  team.promote_event(promotional_graphics.next());
}

let applications = website.download_applications();
console.log(applications.length);
// 394

const rsvp_attrition_rate = 0.3;
let venue_capacity = // TODO: Find this number

let break_hearts = (applications) => {
  let broken_hearts = [];
  applications.forEach((application) => {
    if(does_not_care_about_event(application)){
      broken_hearts.push(application);
      return;
    }
  });
  return broken_hearts;
}

team.accept_applicants;


// Part 8: Handling Logistics

let count_dietary_restrictions = (applications) => {
  let n = applications.length;
  let restrictions = new Map()
  for(let i = 0; i < n; i++){
    let application = applications[i];
    let diet_restriction = application.dietary_restriction;
    if(restrictions.has(diet_restriction)){
      restrictions.set(diet_restriction, restrictions.get(diet_restriction) + 1);
    }else{
      restrictions.set(diet_restriction, 0);
    }
  }
  return restrictions;
}

let dietary_restrictions = count_dietary_restrictions(applications);
team.factorFood(dietary_restrictions);

// Transportation!

// Part 8: The Welcome Party

const http = require('http');

const hostname = 'csi.annex';
const port = 0906;

const server = http.createServer((req, res) => {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
let welcome = `
Thanks for playing
`
  res.end(welcome);
});

server.listen(port, hostname, () => {
  console.log(`Nerding out at ${hostname} on ${port}!`);
});









